
TODO ANDUX megametric
---------------------


-- Chat: Show all ascii-letters. (lowercase).

-- Add 1 'extra:' Controllable bot. Each user can have a persistent bot.

-- Goal: Provide a large and moving group of people with a 
   com system telling what is being said at what locations.
   Complete and document a working, easy-to-use, documented chat 
   system.

   
-- Analyse cost of having the chat system as a client-server system.
   Design system, calculate bit/ticks for clients and server (cm-mode)
   Bandwidth, latency and cpu all considered.

-- Compare to DirectPlay. See how andux fits as a replacement to
   mm-games and as an add-on to DirectPlay. See if DirectPlay
   investigations can lead to better packaging of Andux.
   (Low-level, and agent/area-level).

-- Package Andux in 'network', 'p2p/the real andux', 'application/chat',
   'application/system monitor.'
   'gfx-lib'
   Architect this as a 'network pipeline' like done for graphics.

-- What is andux in most basic form? In: send/receive messages
   asynch way to any socket. Out: List of sockets with positions.

-- Java: Create the 'real user display' Clipped outside FAR. Perhaps showing 
   remotes in colours - corresponding to colour on text.

-- Launch simple OpenGL window from Java and animate
   from a loop in Java.

-- C++:Moving self, viewing the others.
   Chatting to nearby ships.
   Looks like the Terrain example in the OpenGL book.
   Extra: Lots of 'sys-overlays' showing Andux at work.

-- Connector: Keep 'nextFree' value, no need to scan when all in same VM.

-- Set up scenarios that will certainly test the system for full
   scalability.

-- Problems with small system (10 nodes). Find out why. (too few links?)

-- Review: all the various geometrical constants. near, far, cell_min/cell_max.

-- Silent-add: add without resizing world. (To keep old warps)

-- add <socket>, add and contact socket, not last in array.

-- Eval: Massive-eval: check everything. 
   Distances in space, hops in IP to all close, et.c..
   Simulate the warp links in the clustermanager. Set up everything based
   on the full quad tree, see number of hops, et.c...
   Simulate agent-runs- show traces.
   Both-way link analysis. What is a link used for seen from both nodes.

-- Eval: Use known and accurate inside FAR radius in evals. Too little data
   with 'intersect' only. Adjustable 'accurate radius' between intersect and FAR
   Or just adjustable Horizon?

-- Make onscreen graphs interesting again. Problem is very slow 
   eval (autoeval) with large systems. O(n*n) probably.

-- Internet testing:set up and run Internet tests using at least
   8 separate IP nodes.

-- For a node: How many nodes within my cell do I know? What is the possibility
   all warp locations are covered? (nb: this is non-cm, fully local reasoning.)
   For very sparsely filled world: There won't be neighbours knowing the 
   other warp links.

-- One 'recalc' per tick enough, then get stuff from that
   calculation (getQuarter, any, whatever) (even More than enough?)

-- Simulate massively multiplayer game by having one NPC per node.


AGENCY
------
-- Idea: Each local node assuming a density and building a warp link system
   based on those local conditions.

-- Fix/review 'keep-alive' of lonely and warp links.
   If some are cls or wrp and some ext/exi - just ping the ext/exi links?

-- Check agents: If no CLS or WRP - agent factory sending to any EXT/EXI,
   and maintains a lot of links?

-- Problem? 'desired warps' converging towards the big-sized ones?
   Pick 'what warp nodes?' could be agent-driven too?

-- Are far links less frequently used than close links, or
   opposite or no difference?

-- Agent-idea: trim path when full - and continue (until max length or
   until killed by packetloss.)
   
-- Agent: Connection between distances (Evaluation, what nodes to
   bring as 'known' what remote nodes are 'good', to what new remote
   nodes should we go (when we base decision upon distance.)

-- Agent-idea: Map 'sid' -> smaller integer - could chance of understanding.
   (hashing, with collisions allowed.)

-- Store 'cell-route in agents as locations' 2bits/level.

-- Density related to sizes of cells. High-density -> lots of local nodes.
   Can each node have own idea of space partioning (intercom with level-parameter?)
 
-- Add random to warp look-up. Now it picks the same among the best all the time.

-- Agent-warping phase: going to known node - doesn't matter? No, because we
   don't know the known node's warp links.

-- Proxagent on second node, now returning home if not found in mySids. May have
   been cut away. Will never find any success on second node.
      
-- Agent: Go to random warp area (waypoint) first, *then* home in towards target.
   all agents_ first pick *any* desired warp. go there, then go towards
   target.
   Too soon approaching home area (warp proximity) may reduce search
   sphere. But large 'mySids' should prevent empty results, also. Look at 
   this.
 
-- Agent-idea: Getting an overview at local node before departing:
   Where is closest known node, how many inside horizon, et.c. 
   May return with a pretty good node, if no real good is found.
   (local dynamic FAR may also account for this feature)
 
-- Investigate ground propagation. max-path * far distance = quite a lot, too. 
   And perhaps best way to route when both local and target at most
   detailed shared?
 
-- Agent-programming: see similarities between warp agent and prox agent
   analyse and desgin the new agents and extract common behaviour before
   implementing.

-- Agent-idea: The totally lost node: Send agents that bring home
   at least improved nodes (closer to where should go), and sending 
   agents to these nodes will make it easier to the final destination. 
   Create 'LoneAgent' for this work.

-- Keep 'best-links' Send some extra to the two best links (when none 
   within FAR)

-- Agents: Get density readings from remote places.

-- Agent-idea: Real tracer agents: what happened to our agents?
   'in-the-path-of..'

-- Agency: Keep track of stranded remote agents. Gives idea of own success
   ratio/condition of the whole system. ('CrashYard'-statistics)

-- Agency: 'Spy-system' - look into other nodes' agent information.
	
	constant density, constant world size -> cannot grow system.
   	Is this good enough?


-- Design agent sending policy. What links to use/keep?
   Same rules for local agent init as for foreign agent forwarding?
   Experiment with different LOW settings. 
   LOW -> static, dynamically changeable?
   Perhaps keep LOW and 'average' fixed (4-7?) and vary FAR based on
   that (FAR being dynamic and local.)
   
   Keeping links 
   reduces the randomness or not?
   What are the real costs of keeping a link? (little output ok, but how
   little is possible?)
   lots of links -> faster consistency? Under what circumstances?
   Are tests so far too much based on build-up from scratch?
   What decisions to leave to agents, what must be system decisions?
   (e.g. allowing agents to send to anywhere will create a lot of links,
   but this may not matter if these agents are unsuccessful.)
   Measure costs of using links.
	
   few good links <--> many bad links

   bad-many approach is better when a lot more agents are sent,
   or not related?

   make policy choices configurable in cluster.
   Should be dynamically changeable in a single node?


-- Auto-change warp-links after a while - will that limit 'trafficed warp-node'
   problem?

-- locally, dynamically adjusting FAR distance. Keep a pretty constant
   amount of 'ground' distance nodes. See if FAR distance can be 
   adjusted locally with no trouble. (Probably trouble abroad
   for agents, they need to bring the local FAR distance with them.)
   Perhaps possible for 'user' to adjust based on local computer.

-- agent often near FAR region, but passing by. Keep these close ones.

-- Use newly discovered neighbours more to agent routes than nodes known
   for a long time.

-- Use close, known nodes more than remote known nodes.

-- Some nodes get a huge amount of EXT links (probably remote warps).
   Find out exactly why they show, and find out how to get rid of this
   crowding.

-- See system paradigma - full disorder, mostly order, full order, et.c.
   Characteristics. How to find characteristics (if possible).
   Lots of agent successes indicates disorder. Also finding very close
   agents indicates disorder or a system struggling to keep up.
   Lots of foreign agents giving up indicates own failure/their
   success (what is, propagation to next, or finding?)
   Nodes-on-the-move: Area changes a lot, must send a lot. Something
   the same for agent sending. Only moving or new agents may mess up
   a consistent system.
   

----------------------------------------------------------------------------

Improve graphics engine
-----------------------

- Translucency to lines, anti-aliasing to lines.
- Redraw active areas only. With periodic clean sweep all over.
  Coarse mesh. Anything intersecting -> on draw list.
  draw list.
  next turn -> new mesh.
  (Info about mesh in commands)

- Change screen size run-time.
- Rasterizer <-> Screen. rasterizer is just number crunching on buffer.
- multiple models and framebuffers to hold static content.
- model clipping
- Fix cross -  max/min not properly set in rasterizer.
- Create raster-stats/commands to view. lines, clipped, et.c..

- Think: Useable by others. click to achieve things.
  'Main interface' click to open,close, select window.
  Talk, work everywhere? Move, too? Draw (local only) rotate/thrust
  ship of self. Especially for 'user style  view' with chat and move.

- Color strengh indicate distance,or z-value?