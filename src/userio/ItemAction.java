package userio;/** Movement holds parameters enough to give an item* a new set of input - thrust forward, backward, turn left or* right.**/public class ItemAction {	public static final int TURN_LEFT = 1;	public static final int TURN_RIGHT = 2;	public static final int NO_TURN = 3;	public static final int FORWARD = 4;	public static final int BACKWARD = 5;	public static final int NO_THRUST = 6;	public static final int SHOOT = 7;	public static final int NO_SHOOT = 8;	private int turn;	private int thrust;	private int shoot;    public ItemAction() {  		idle();  		dontTurn();		dontShoot();    }	public boolean thrustChanged(ItemAction a) {		return a.getThrust() != getThrust();	}	public void setThrust(ItemAction a) {		setThrust(a.getThrust() );	}	public void shoot() {		shoot = SHOOT;	}	public void dontShoot() {		shoot = NO_SHOOT;	}	public int getShoot() {		return shoot;	}	public void setShoot(ItemAction a) {		shoot = a.getShoot();	}	public boolean isShooting() {		return shoot == SHOOT;	}	public boolean shootChanged(ItemAction a) {		return a.getShoot() != getShoot();	}	public boolean turnChanged(ItemAction a) {		return a.getTurn() != getTurn();	}	public void setTurn(ItemAction a) {		setTurn(a.getTurn() );	}	public void turnLeft() {		turn = TURN_LEFT;	}	public boolean turnsLeft() {		return turn == TURN_LEFT;	}	public boolean turnsRight() {		return turn == TURN_RIGHT;	}	public boolean doesntTurn() {		return turn == NO_TURN;	}	public boolean accelerates() {		return thrust == FORWARD;	}	public boolean brakes() {		return thrust == BACKWARD;	}	public boolean idles() {		return thrust == NO_THRUST;	}	public void turnRight() {		turn = TURN_RIGHT;	}	public void dontTurn() {		turn = NO_TURN;	}	public void accelerate() {		thrust = FORWARD;	}	public void brake() {		thrust = BACKWARD;	}	public void idle() {		thrust = NO_THRUST;	}	public int getTurn() {		return turn;	}	public int getThrust() {		return thrust;	}	public void setTurn(int tu) {		if(checkTurn(tu) ) {			turn = tu;		} else {			System.out.println("ItemAction.setTurn: Invalid turn parameter " + tu );		}	}	public void setThrust(int th) {		if(checkThrust(th) ) {			thrust = th;		} else {			System.out.println("ItemAction.setThrust: Invalid turn parameter " + th);		}	}	private boolean checkThrust(int th) {		if (th != NO_THRUST && th != FORWARD && th != BACKWARD) {			System.out.println("ItemAction: Invalid thrust parameters");			return false;		} else {			return true;		}	}	private boolean checkTurn(int tu) {			if (tu != NO_TURN && tu != TURN_LEFT && tu != TURN_RIGHT ) {					System.out.println("ItemAction: Invalid turn parameters");				return false;			} else {				return true;			}	}}